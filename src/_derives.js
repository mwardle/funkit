module.exports = ((_) => {
    const typedArrayDerivations = [
        'Eq',
        'Ord',
        'Functor',
        'Foldable',
        'Semigroup',
        'Monoid',
        'Show',
        'Hashable',
        'Sequential',
    ];

    const derivations = {
        Array: [
            'Eq',
            'Ord',
            'Functor',
            'Foldable',
            'Semigroup',
            'Monoid',
            'Applicative',
            'Monad',
            'Sequential',
            'SetOps',
            'SetKind',
            'Show',
            'Hashable',
        ],
        ArrayBuffer: [
            'Eq',
            'Ord',
            'Functor',
            'Foldable',
            'Semigroup',
            'Monoid',
            'Sequential',
            'Show',
            'Hashable',
        ],
        TypedArray: [
            'Eq',
            'Ord',
            'Functor',
            'Foldable',
            'Semigroup',
            'Show',
            'Hashable',
        ],
        Int8Array: typedArrayDerivations,
        Uint8Array: typedArrayDerivations,
        Uint8ClampedArray: typedArrayDerivations,
        Int16Array: typedArrayDerivations,
        Uint16Array: typedArrayDerivations,
        Int32Array: typedArrayDerivations,
        Uint32Array: typedArrayDerivations,
        Float32Array: typedArrayDerivations,
        Float64Array: typedArrayDerivations,
        Boolean: [
            'Eq',
            'Ord',
            'Enum',
            'Bounded',
            'Show',
            'Hashable',
        ],
        Date: [
            'Eq',
            'Ord',
            'Numeric',
            'Show',
            'Hashable',
        ],
        Integer: [
            'Eq',
            'Ord',
            'Enum',
            'Numeric',
            'Show',
            'Hashable',
            'Bounded',
        ],
        Map: [
            'Eq',
            'Functor',
            'Foldable',
            'Semigroup',
            'Monoid',
            'SetOps',
            'Show',
            'Associative',
            'AssocFoldable',
            'Hashable',
        ],
        Number: [
            'Eq',
            'Ord',
            'Enum',
            'Numeric',
            'Show',
            'Hashable',
        ],
        Object: [
            'Eq',
            'Functor',
            'Foldable',
            'Semigroup',
            'Monoid',
            'SetOps',
            'Show',
            'Associative',
            'AssocFoldable',
            'Hashable',
        ],
        Set: [
            'Eq',
            'Functor',
            'Foldable',
            'Semigroup',
            'Monoid',
            'SetOps',
            'Show',
            'SetOps',
            'SetKind',
            'Hashable',
        ],
        String: [
            'Eq',
            'Ord',
            'Functor',
            'Foldable',
            'Semigroup',
            'Monoid',
            'Sequential',
            'Show',
            'Hashable',
        ],
        Unit: [
            'Eq',
            'Ord',
            'Functor',
            'Semigroup',
            'Monoid',
            'Hashable',
        ],
    };

    Object.keys(derivations).forEach((key) => {
        derivations[key].forEach(className => {
            _[className].deriveFor(_[key]);
        });
    });
});
